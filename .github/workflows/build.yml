name: Build

on: [pull_request, push]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    env:
      MACOSX_DEPLOYMENT_TARGET: 12
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact-name: Windows-x86_64
            os: windows-2022
            tauri-build-flags:

          # CasADi doesn't support Windows aarch64
          # - artifact-name: Windows-aarch64
          #   os: windows-2022
          #   tauri-build-flags: -- --target aarch64-pc-windows-msvc

          - artifact-name: macOS-x86_64
            os: macOS-13
            tauri-build-flags:

          - artifact-name: macOS-arm64
            os: macOS-14
            tauri-build-flags:

          - artifact-name: Linux-x86_64
            os: ubuntu-latest
            tauri-build-flags:

    name: "${{ matrix.artifact-name }}"
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set to Windows GNU Rust Toolchain
        if: matrix.os == 'windows-2022'
        run: |
          rustup install 1.76-gnu --no-self-update
          rustup default 1.76-gnu

      - name: Set up MinGW
        if: matrix.os == 'windows-2022'
        run: |
          choco upgrade mingw --version=13.2.0 -y --no-progress --allow-downgrade
          echo "C:\ProgramData\mingw64\mingw64\bin" >> $env:GITHUB_PATH
          curl -o C:\ProgramData\mingw64\mingw64\bin\binutils.tar.zst https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-binutils-2.42-1-any.pkg.tar.zst
          echo "Downloaded binutils"
          tar -xv --zstd -f C:\ProgramData\mingw64\mingw64\bin\binutils.tar.zst -C C:\ProgramData\mingw64\mingw64\bin
          ls C:\ProgramData\mingw64\mingw64\bin
      - name: Set up binutils
        if: matrix.os == 'windows-2022'
        run: |
          
          ls C:\ProgramData\mingw64\mingw64\bin
      - name: Check MinGW versions
        if: matrix.os == 'windows-2022'
        run: |
          echo "$env:PATH"
          ld -v
          gcc -v

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install Node.js dependencies
        run: npm install
        continue-on-error: true

      - name: Set up Windows aarch64 Rust compiler
        if: matrix.artifact-name == 'Windows-aarch64'
        run: rustup target install aarch64-pc-windows-msvc

      - name: Build package
        run: npm run tauri build ${{ matrix.tauri-build-flags }}

      - name: Upload bundle (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: src-tauri/target/**/release/bundle/nsis/*.exe

      - name: Upload bundle (macOS)
        if: startsWith(matrix.os, 'macOS')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: src-tauri/target/**/release/bundle/dmg/*.dmg

      - name: Upload bundle (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: src-tauri/target/**/release/bundle/deb/*.deb

  release:
    name: Create draft release
    needs: [build]
    runs-on: ubuntu-latest
    if: |
      github.repository_owner == 'SleipnirGroup' &&
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download prebuilt binaries
        uses: actions/download-artifact@v4
        with:
          path: pkg

      - name: Display structure of downloaded files
        run: ls -R

      - name: Rename Windows x86_64 bundle
        working-directory: pkg/Windows-x86_64/release/bundle/nsis
        run: mv *.exe Choreo-${{ github.ref_name }}-Windows-x86_64.exe

      - name: Rename Windows aarch64 bundle
        working-directory: pkg/Windows-aarch64/aarch64-pc-windows-msvc/release/bundle/nsis
        run: mv *.exe Choreo-${{ github.ref_name }}-Windows-aarch64.exe

      - name: Rename macOS x86_64 bundle
        working-directory: pkg/macOS-x86_64/release/bundle/dmg
        run: mv *.dmg Choreo-${{ github.ref_name }}-macOS-x86_64.dmg

      - name: Rename macOS arm64 bundle
        working-directory: pkg/macOS-arm64/release/bundle/dmg
        run: mv *.dmg Choreo-${{ github.ref_name }}-macOS-arm64.dmg

      - name: Rename Linux x86_64 file (.deb)
        working-directory: pkg/Linux-x86_64/release/bundle/deb
        run: mv *.deb Choreo-${{ github.ref_name }}-Linux-x86_64.deb

      - name: Display structure of renamed files
        run: ls -R

      - uses: ncipollo/release-action@v1
        with:
          name: Choreo ${{ github.ref_name }}
          tag: ${{ github.ref_name }}
          artifacts: "pkg/**/*.exe,pkg/**/*.deb,pkg/**/*.dmg"
          draft: true
          prerelease: true
